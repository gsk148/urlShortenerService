// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/shortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShortenerService_BatchShortenAPI_FullMethodName = "/proto.ShortenerService/BatchShortenAPI"
	ShortenerService_DeleteURLs_FullMethodName      = "/proto.ShortenerService/DeleteURLs"
	ShortenerService_FindByShortLink_FullMethodName = "/proto.ShortenerService/FindByShortLink"
	ShortenerService_FindUserURLS_FullMethodName    = "/proto.ShortenerService/FindUserURLS"
	ShortenerService_GetStats_FullMethodName        = "/proto.ShortenerService/GetStats"
	ShortenerService_Ping_FullMethodName            = "/proto.ShortenerService/Ping"
	ShortenerService_ShortenAPI_FullMethodName      = "/proto.ShortenerService/ShortenAPI"
	ShortenerService_Shorten_FullMethodName         = "/proto.ShortenerService/Shorten"
)

// ShortenerServiceClient is the client API for ShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerServiceClient interface {
	BatchShortenAPI(ctx context.Context, in *BatchShortenAPIRequest, opts ...grpc.CallOption) (*BatchShortenAPIResponse, error)
	DeleteURLs(ctx context.Context, in *DeleteURLsRequest, opts ...grpc.CallOption) (*DeleteURLsResponse, error)
	FindByShortLink(ctx context.Context, in *FindByShortLinkRequest, opts ...grpc.CallOption) (*URLInfo, error)
	FindUserURLS(ctx context.Context, in *FindUserURLSRequest, opts ...grpc.CallOption) (*BatchShortenAPIResponse, error)
	GetStats(ctx context.Context, in *GetStatisticRequest, opts ...grpc.CallOption) (*GetStatisticResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	ShortenAPI(ctx context.Context, in *ShortenAPIRequest, opts ...grpc.CallOption) (*ShortenAPIResponse, error)
	Shorten(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error)
}

type shortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerServiceClient(cc grpc.ClientConnInterface) ShortenerServiceClient {
	return &shortenerServiceClient{cc}
}

func (c *shortenerServiceClient) BatchShortenAPI(ctx context.Context, in *BatchShortenAPIRequest, opts ...grpc.CallOption) (*BatchShortenAPIResponse, error) {
	out := new(BatchShortenAPIResponse)
	err := c.cc.Invoke(ctx, ShortenerService_BatchShortenAPI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) DeleteURLs(ctx context.Context, in *DeleteURLsRequest, opts ...grpc.CallOption) (*DeleteURLsResponse, error) {
	out := new(DeleteURLsResponse)
	err := c.cc.Invoke(ctx, ShortenerService_DeleteURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) FindByShortLink(ctx context.Context, in *FindByShortLinkRequest, opts ...grpc.CallOption) (*URLInfo, error) {
	out := new(URLInfo)
	err := c.cc.Invoke(ctx, ShortenerService_FindByShortLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) FindUserURLS(ctx context.Context, in *FindUserURLSRequest, opts ...grpc.CallOption) (*BatchShortenAPIResponse, error) {
	out := new(BatchShortenAPIResponse)
	err := c.cc.Invoke(ctx, ShortenerService_FindUserURLS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) GetStats(ctx context.Context, in *GetStatisticRequest, opts ...grpc.CallOption) (*GetStatisticResponse, error) {
	out := new(GetStatisticResponse)
	err := c.cc.Invoke(ctx, ShortenerService_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ShortenerService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) ShortenAPI(ctx context.Context, in *ShortenAPIRequest, opts ...grpc.CallOption) (*ShortenAPIResponse, error) {
	out := new(ShortenAPIResponse)
	err := c.cc.Invoke(ctx, ShortenerService_ShortenAPI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) Shorten(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error) {
	out := new(ShortenResponse)
	err := c.cc.Invoke(ctx, ShortenerService_Shorten_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServiceServer is the server API for ShortenerService service.
// All implementations must embed UnimplementedShortenerServiceServer
// for forward compatibility
type ShortenerServiceServer interface {
	BatchShortenAPI(context.Context, *BatchShortenAPIRequest) (*BatchShortenAPIResponse, error)
	DeleteURLs(context.Context, *DeleteURLsRequest) (*DeleteURLsResponse, error)
	FindByShortLink(context.Context, *FindByShortLinkRequest) (*URLInfo, error)
	FindUserURLS(context.Context, *FindUserURLSRequest) (*BatchShortenAPIResponse, error)
	GetStats(context.Context, *GetStatisticRequest) (*GetStatisticResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	ShortenAPI(context.Context, *ShortenAPIRequest) (*ShortenAPIResponse, error)
	Shorten(context.Context, *ShortenRequest) (*ShortenResponse, error)
	mustEmbedUnimplementedShortenerServiceServer()
}

// UnimplementedShortenerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServiceServer struct {
}

func (UnimplementedShortenerServiceServer) BatchShortenAPI(context.Context, *BatchShortenAPIRequest) (*BatchShortenAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchShortenAPI not implemented")
}
func (UnimplementedShortenerServiceServer) DeleteURLs(context.Context, *DeleteURLsRequest) (*DeleteURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURLs not implemented")
}
func (UnimplementedShortenerServiceServer) FindByShortLink(context.Context, *FindByShortLinkRequest) (*URLInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByShortLink not implemented")
}
func (UnimplementedShortenerServiceServer) FindUserURLS(context.Context, *FindUserURLSRequest) (*BatchShortenAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserURLS not implemented")
}
func (UnimplementedShortenerServiceServer) GetStats(context.Context, *GetStatisticRequest) (*GetStatisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedShortenerServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortenerServiceServer) ShortenAPI(context.Context, *ShortenAPIRequest) (*ShortenAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenAPI not implemented")
}
func (UnimplementedShortenerServiceServer) Shorten(context.Context, *ShortenRequest) (*ShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shorten not implemented")
}
func (UnimplementedShortenerServiceServer) mustEmbedUnimplementedShortenerServiceServer() {}

// UnsafeShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServiceServer will
// result in compilation errors.
type UnsafeShortenerServiceServer interface {
	mustEmbedUnimplementedShortenerServiceServer()
}

func RegisterShortenerServiceServer(s grpc.ServiceRegistrar, srv ShortenerServiceServer) {
	s.RegisterService(&ShortenerService_ServiceDesc, srv)
}

func _ShortenerService_BatchShortenAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchShortenAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).BatchShortenAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_BatchShortenAPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).BatchShortenAPI(ctx, req.(*BatchShortenAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_DeleteURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).DeleteURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_DeleteURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).DeleteURLs(ctx, req.(*DeleteURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_FindByShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).FindByShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_FindByShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).FindByShortLink(ctx, req.(*FindByShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_FindUserURLS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserURLSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).FindUserURLS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_FindUserURLS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).FindUserURLS(ctx, req.(*FindUserURLSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).GetStats(ctx, req.(*GetStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_ShortenAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).ShortenAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_ShortenAPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).ShortenAPI(ctx, req.(*ShortenAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_Shorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).Shorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerService_Shorten_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).Shorten(ctx, req.(*ShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenerService_ServiceDesc is the grpc.ServiceDesc for ShortenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ShortenerService",
	HandlerType: (*ShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchShortenAPI",
			Handler:    _ShortenerService_BatchShortenAPI_Handler,
		},
		{
			MethodName: "DeleteURLs",
			Handler:    _ShortenerService_DeleteURLs_Handler,
		},
		{
			MethodName: "FindByShortLink",
			Handler:    _ShortenerService_FindByShortLink_Handler,
		},
		{
			MethodName: "FindUserURLS",
			Handler:    _ShortenerService_FindUserURLS_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _ShortenerService_GetStats_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ShortenerService_Ping_Handler,
		},
		{
			MethodName: "ShortenAPI",
			Handler:    _ShortenerService_ShortenAPI_Handler,
		},
		{
			MethodName: "Shorten",
			Handler:    _ShortenerService_Shorten_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shortener.proto",
}
